name: Deploy Site (pull + restart IIS + ensure Postgres)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: site-deploy-${{ github.ref }}
  cancel-in-progress: true

# ─── EDIT PER SERVER ───────────────────────────────────────────────
env:
  SITE_PATH: 'C:\\inetpub\\wwwroot\\zetaslate'   # repo root served by IIS
  PY_EXE:   'C:\Users\Administrator\AppData\Local\Programs\Python\Python312\python.exe'          # system Python IIS runs
# ───────────────────────────────────────────────────────────────────

jobs:
  deploy:
    runs-on: [ self-hosted, windows, x64 ]
    defaults:
      run:
        shell: powershell

    steps:
    # ── 0  Checkout ────────────────────────────────────────────────
    - uses: actions/checkout@v4

    # ── 0½ Build host-name env-vars (PowerShell-5 safe) ───────────
    - name: Load project config
      run: |
        $cfgPath = "${{ github.workspace }}\project-config.json"
        $cfg     = @{}
        if (Test-Path $cfgPath) { $cfg = Get-Content -Raw $cfgPath | ConvertFrom-Json }

        $site = Split-Path -Leaf $Env:SITE_PATH
        $dom  = '.com'
        if ($cfg -ne $null -and $cfg.PSObject.Properties['websitedomain'] -and $cfg.websitedomain) {
          $dom = $cfg.websitedomain
        }

        $root   = "$site$dom"
        $admin  = "admin.$root"
        $api    = "api.$root"

        "WARMUP_URL=https://$root/"                                     | Out-File $Env:GITHUB_ENV -Append
        "DJANGO_ALLOWED_HOSTS=$root,www.$root,$admin,$api"              | Out-File $Env:GITHUB_ENV -Append
        "DJANGO_CSRF_TRUSTED=https://$root,https://$admin,https://$api" | Out-File $Env:GITHUB_ENV -Append
        "SITE_NAME=$site"                                               | Out-File $Env:GITHUB_ENV -Append

    # ── 1  Git fast-forward IIS folder ─────────────────────────────
    - name: Configure Git
      run: |
        git config --global --add safe.directory $Env:SITE_PATH
        $url = "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
        git -C $Env:SITE_PATH remote set-url origin $url

    - name: Set global Git identity
      run: |
        git config --global user.name  "${{ github.actor }} (GitHub Actions)"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Pull site code
      run: |
        git -C $Env:SITE_PATH fetch --all --prune
        git -C $Env:SITE_PATH reset --hard origin/main

    # ── 2  Python & requirements ───────────────────────────────────
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: pip
        cache-dependency-path: backend/requirements.txt

    - name: Install requirements
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r "${{ github.workspace }}\backend\requirements.txt"

    - name: Install requirements for IIS
      run: |
        & $Env:PY_EXE -m pip install --upgrade -r "${{ github.workspace }}\backend\requirements.txt"

        
    # ── 2½ Ensure wfastcgi present & mapped (duplicate-safe) ───────
    - name: Ensure wfastcgi global install
      run: |
        ########################
        # 1. Locate Python exe #
        ########################
        if (Test-Path $Env:PY_EXE) {
          $py = $Env:PY_EXE
        } else {
          $py = (Get-Command python.exe).Source
          Write-Host "PY_EXE not found, using $py"
        }

        ###############################
        # 2. Make sure wfastcgi is in #
        #    that interpreter's site  #
        ###############################
        & $py -m pip install --quiet --upgrade wfastcgi

        ############################################
        # 3. Refresh FastCGI mapping — self-healing #
        ############################################
        $fcgi   = Join-Path (Split-Path $py) 'Scripts\wfastcgi.py'
        $appcmd = Join-Path $env:SystemRoot 'System32\inetsrv\appcmd.exe'

        # Current FastCGI collection
        $cfg    = & $appcmd list config /section:system.webServer/fastCgi /text:* 2>$null
        $haveOk = ($cfg -match [regex]::Escape($py)) -and ($cfg -match [regex]::Escape($fcgi))

        if (-not $haveOk) {
          Write-Host "Refreshing FastCGI mapping for wfastcgi…"

          # Remove any existing entry for this interpreter (ignore error if none)
          & $appcmd set config /section:system.webServer/fastCgi "/-[fullPath='$py']" 2>$null

          # Add one clean entry
          & $appcmd set config /section:system.webServer/fastCgi "/+[fullPath='$py',arguments='|$fcgi']"

          Write-Host "FastCGI mapping refreshed for $py"
        } else {
          Write-Host "FastCGI mapping already correct"
        }
    # ── 2¾  Install URL-Rewrite if missing ─────────────────────────
    - name: Ensure IIS URL-Rewrite module
      run: |
        Import-Module WebAdministration

        if (-not (Get-WebGlobalModule -Name 'RewriteModule' -ErrorAction SilentlyContinue)) {
          Write-Host 'URL-Rewrite not found – installing...'

          $msi = Join-Path $env:TEMP 'rewrite.msi'
          Invoke-WebRequest -Uri 'https://download.microsoft.com/download/D/5/1/D5149994-9C36-4039-A20F-1E0DAFA94230/rewrite_amd64.msi' -OutFile $msi

          Start-Process msiexec.exe -ArgumentList "/i `"$msi`" /quiet /norestart" -Wait
          Remove-Item $msi
        }
        else {
          Write-Host 'URL-Rewrite already installed.'
        }

    # ── 2¾⁺  GLOBAL unlock of <handlers> (or backend\web.config stays locked) ──
    - name: Unlock handlers section once
      run: |
        & "$env:SystemRoot\System32\inetsrv\appcmd.exe" unlock config /section:system.webServer/handlers

    # ── 2⅞  Self-heal FastCGI + PythonHandler for backend site ─────
    - name: Ensure FastCGI → Python 3.12 and handler for site
      run: |
        $appcmd   = "$env:SystemRoot\System32\inetsrv\appcmd.exe"
        $site     = 'zetaslate-backend'
        $py       = $Env:PY_EXE
        $fcgi     = Join-Path (Split-Path $py) Scripts\wfastcgi.py

        # A) one single FastCGI row, updated in-place
        & $appcmd set config /section:system.webServer/fastCgi `
              "/unique[fullPath='$py',arguments='|$fcgi']"

        # remove stale 3.13 mapping if still there (ignore error)
        & $appcmd set config /section:system.webServer/fastCgi `
              "/-[fullPath='C:\\Python313\\python.exe']" 2>$null

        # B) site handler → always point to current Python
        & $appcmd set config $site /section:system.webServer/handlers `
              "/-[name='PythonHandler']" 2>$null
        & $appcmd set config $site /section:system.webServer/handlers `
              "/unique[name='PythonHandler',path='*',verb='*',modules='FastCgiModule'," `
              + "scriptProcessor='$py|$fcgi',resourceType='Unspecified',requireAccess='Script']"

    # ── 2⅞½ One-time scrub of rogue <location … system.web> ─────────
    - name: Remove stray <location … system.web> (if present)
      run: |
        $cfgPath = "$env:SystemRoot\System32\inetsrv\config\applicationHost.config"
        $content = Get-Content $cfgPath -Raw
        if ($content -match '<location path="" overrideMode="Allow">\s*<system\.web>') {
          Write-Host "Deleting rogue <location> block from applicationHost.config"
          $clean = $content -replace '<location path="" overrideMode="Allow">.*?</location>\s*$',''
          $clean | Set-Content $cfgPath -Encoding UTF8
        } else {
          Write-Host "No rogue <location> block found."
        }

    # ── ensure log folder exists and is writable ──────────────────────
    - name: Ensure Django log directory
      run: |
       $logDir  = 'C:\inetpub\logs\django'      # path used in WSGI_LOG
       $appPool = 'zetaslate-backend'           # IIS app-pool name

       if (-not (Test-Path $logDir)) {
        New-Item -Path $logDir -ItemType Directory | Out-Null
        Write-Host "Created $logDir"
       }

       icacls $logDir /grant "IIS AppPool\${appPool}:(M)" /T /C | Out-Null
       Write-Host "Granted Modify rights to IIS AppPool\$appPool"

    # ── 3  Restart IIS ─────────────────────────────────────────────
    - name: Restart IIS
      run: |
        iisreset /stop
        iisreset /start

    # ── 4  PostgreSQL cluster / service ────────────────────────────
    - name: Ensure & (re)start PostgreSQL
      run: |
        $svc = Get-WmiObject Win32_Service | Where-Object { $_.Name -like 'postgresql*' } |
               Sort-Object Name -Descending | Select-Object -First 1
        if (-not $svc) { throw 'PostgreSQL service not found' }

        $cmd = $svc.PathName
        if ($cmd -match '"([^"]+\\pg_ctl\.exe)"')      { $pgCtl = $Matches[1] }
        elseif ($cmd -match '([^\s"]+\\pg_ctl\.exe)')  { $pgCtl = $Matches[1] }
        else { throw 'pg_ctl.exe not found in service command' }

        if ($cmd -match '-D\s+"([^"]+)"')      { $data = $Matches[1] }
        elseif ($cmd -match '-D\s+([^\s"]+)')  { $data = $Matches[1] }
        else { throw 'data directory not found in service command' }

        if (-not (Test-Path $data)) {
          & "$pgCtl" initdb -D "$data"
          & "$pgCtl" register -N $svc.Name -D "$data" -U 'NT AUTHORITY\NetworkService'
          Set-Service $svc.Name -StartupType Automatic
          Start-Service $svc.Name
        } else {
          Restart-Service $svc.Name -Force
        }

    # ── 4½ Ensure DB & role (no ternaries) ─────────────────────────
    - name: Ensure DB & role exist
      run: |
        $Env:PGPASSWORD = $Env:POSTGRES_PASSWORD
        echo "::add-mask::$Env:PGPASSWORD"

        # pick names
        $db = $Env:POSTGRES_DB
        if (-not $db) { $db = $Env:SITE_NAME }

        $user = $Env:POSTGRES_USER
        if (-not $user) { $user = $Env:SITE_NAME }

        $sup = $Env:POSTGRES_SUPERUSER

        # locate psql.exe
        $svc = Get-WmiObject Win32_Service | Where-Object { $_.Name -like 'postgresql*' } |
               Sort-Object Name -Descending | Select-Object -First 1
        $bin = ''
        if ($svc.PathName -match '"([^"]+\\)pg_ctl\.exe"')      { $bin = $Matches[1] }
        elseif ($svc.PathName -match '([^\s"]+\\)pg_ctl\.exe')  { $bin = $Matches[1] }

        $psql = 'psql'
        if ($bin) {
          $candidate = "$bin\psql.exe"
          if (Test-Path $candidate) { $psql = $candidate }
        }

        # role
        if (-not (& "$psql" -U $sup -tAc "SELECT 1 FROM pg_roles WHERE rolname='$user'")) {
          & "$psql" -U $sup -c "CREATE USER $user WITH PASSWORD '$Env:POSTGRES_PASSWORD';"
        }

        # database
        if (-not (& "$psql" -U $sup -tAc "SELECT 1 FROM pg_database WHERE datname='$db'")) {
          & "$psql" -U $sup -c "CREATE DATABASE $db OWNER $user;"
        }

    # ── 5  Django migrate ──────────────────────────────────────────
    - name: Django migrate
      run: |
        $proj = Join-Path $Env:SITE_PATH 'backend'
        if (-not (Test-Path "$proj\manage.py")) { throw "manage.py not found at $proj" }
        Set-Location $proj
        python manage.py migrate --noinput

    # ── 6  Warm-up request ─────────────────────────────────────────
    - name: Warm-up request
      run: |
        Invoke-WebRequest -Uri $Env:WARMUP_URL -UseBasicParsing -TimeoutSec 30