name: Deploy Site (pull + restart IIS + ensure Postgres)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: site-deploy-${{ github.ref }}
  cancel-in-progress: true

# ─── EDIT PER SERVER ────────────────────────────────────────────────
env:
  SITE_PATH: 'C:\\inetpub\\wwwroot\\zetaslate'   # repo root served by IIS
  PY_EXE:   'C:\\Python313\\python.exe'          # system Python IIS must run
# ───────────────────────────────────────────────────────────────────

jobs:
  deploy:
    runs-on: [ self-hosted, windows, x64 ]
    defaults:
      run:
        shell: powershell

    steps:
    # ── 0. Checkout repository ─────────────────────────────────────
    - uses: actions/checkout@v4

    # ── 0½. Derive host-names and export env vars (no ternaries) ───
    - name: Load project config
      run: |
        $cfgPath = "${{ github.workspace }}\project-config.json"
        $cfg     = @{}
        if (Test-Path $cfgPath) { $cfg = Get-Content -Raw $cfgPath | ConvertFrom-Json }

        $site = Split-Path -Leaf $Env:SITE_PATH
        $dom  = '.com'
        if ($cfg -ne $null -and $cfg.PSObject.Properties['websitedomain'] -and $cfg.websitedomain) {
          $dom = $cfg.websitedomain
        }

        $root  = "$site$dom"
        $admin = "admin.$root"
        $api   = "api.$root"

        "WARMUP_URL=https://$root/"                                     | Out-File $Env:GITHUB_ENV -Append
        "DJANGO_ALLOWED_HOSTS=$root,www.$root,$admin,$api"              | Out-File $Env:GITHUB_ENV -Append
        "DJANGO_CSRF_TRUSTED=https://$root,https://$admin,https://$api" | Out-File $Env:GITHUB_ENV -Append
        "SITE_NAME=$site"                                               | Out-File $Env:GITHUB_ENV -Append

    # ── 1. Configure Git for IIS-served tree ────────────────────────
    - name: Configure Git
      run: |
        git config --global --add safe.directory $Env:SITE_PATH
        $url = "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
        git -C $Env:SITE_PATH remote set-url origin $url

    - name: Set global Git identity
      run: |
        git config --global user.name  "${{ github.actor }} (GitHub Actions)"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Pull site code
      run: |
        git -C $Env:SITE_PATH fetch --all --prune
        git -C $Env:SITE_PATH reset --hard origin/main

    # ── 2. Python & project dependencies ────────────────────────────
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: pip
        cache-dependency-path: backend/requirements.txt

    - name: Install requirements
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r "${{ github.workspace }}\backend\requirements.txt"

    # ── 2½. Ensure wfastcgi present & FastCGI-mapped (idempotent) ───
    - name: Ensure wfastcgi global install
      run: |
        # locate a writable system Python
        if (Test-Path $Env:PY_EXE) {
          $py = $Env:PY_EXE
        } else {
          $py = (Get-Command python.exe).Source
          Write-Host "PY_EXE not found, using $py"
        }

        # install/upgrade wfastcgi quietly
        & $py -m pip install --quiet --upgrade wfastcgi

        # add mapping only if missing
        $fcgi      = Join-Path (Split-Path $py) 'Scripts\wfastcgi.py'
        $signature = "fullPath='$py',arguments='|$fcgi'"
        $existing  = & "$env:windir\System32\inetsrv\appcmd.exe" list config `
                       /section:system.webServer/fastCgi /text:* 2>$null

        if ($existing -notmatch [regex]::Escape($signature)) {
          Write-Host "Adding FastCGI mapping for wfastcgi..."
          & "$env:windir\System32\inetsrv\appcmd.exe" set config `
              /section:system.webServer/fastCgi `
              "/+[fullPath='$py',arguments='|$fcgi']"
        } else {
          Write-Host "FastCGI mapping already exists"
        }

    # ── 3. Restart IIS ──────────────────────────────────────────────
    - name: Restart IIS
      run: |
        iisreset /stop
        iisreset /start

    # ── 4. PostgreSQL cluster / service ─────────────────────────────
    - name: Ensure & (re)start PostgreSQL
      run: |
        $svc = Get-WmiObject Win32_Service | ? { $_.Name -like 'postgresql*' } |
               Sort-Object Name -Descending | Select-Object -First 1
        if (-not $svc) { throw 'PostgreSQL service not found' }

        $cmd = $svc.PathName
        if ($cmd -match '"([^"]+\\pg_ctl\.exe)"')      { $pgCtl = $Matches[1] }
        elseif ($cmd -match '([^\s"]+\\pg_ctl\.exe)')  { $pgCtl = $Matches[1] }
        else { throw 'pg_ctl.exe not found in service command' }

        if ($cmd -match '-D\s+"([^"]+)"')      { $data = $Matches[1] }
        elseif ($cmd -match '-D\s+([^\s"]+)')  { $data = $Matches[1] }
        else { throw 'data directory not found in service command' }

        if (-not (Test-Path $data)) {
          & "$pgCtl" initdb -D "$data"
          & "$pgCtl" register -N $svc.Name -D "$data" -U 'NT AUTHORITY\NetworkService'
          Set-Service $svc.Name -StartupType Automatic
          Start-Service $svc.Name
        } else {
          Restart-Service $svc.Name -Force
        }

    # ── 4½. Ensure app role & DB exist ─────────────────────────────
    - name: Ensure DB & role exist
      run: |
        $Env:PGPASSWORD = $Env:POSTGRES_PASSWORD
        echo "::add-mask::$Env:PGPASSWORD"

        if ($Env:POSTGRES_DB)   { $db   = $Env:POSTGRES_DB }   else { $db   = $Env:SITE_NAME }
        if ($Env:POSTGRES_USER) { $user = $Env:POSTGRES_USER } else { $user = $Env:SITE_NAME }

        $sup  = $Env:POSTGRES_SUPERUSER
        $svc  = Get-WmiObject Win32_Service | ? { $_.Name -like 'postgresql*' } |
                Sort-Object Name -Descending | Select-Object -First 1
        $bin  = ''
        if ($svc.PathName -match '"([^"]+\\)pg_ctl\.exe"')      { $bin = $Matches[1] }
        elseif ($svc.PathName -match '([^\s"]+\\)pg_ctl\.exe')  { $bin = $Matches[1] }

        $psql = (Test-Path "$bin\psql.exe") ? "$bin\psql.exe" : 'psql'

        $roleExists = & "$psql" -U $sup -tAc "SELECT 1 FROM pg_roles WHERE rolname='$user'"
        if (-not $roleExists) {
          & "$psql" -U $sup -c "CREATE USER $user WITH PASSWORD '$Env:POSTGRES_PASSWORD';"
        }

        $dbExists = & "$psql" -U $sup -tAc "SELECT 1 FROM pg_database WHERE datname='$db'"
        if (-not $dbExists) {
          & "$psql" -U $sup -c "CREATE DATABASE $db OWNER $user;"
        }

    # ── 5. Django migrate ──────────────────────────────────────────
    - name: Django migrate
      run: |
        $proj = Join-Path $Env:SITE_PATH 'backend'
        if (-not (Test-Path "$proj\manage.py")) { throw "manage.py not found at $proj" }
        Set-Location $proj
        python manage.py migrate --noinput

    # ── 6. Warm-up request ─────────────────────────────────────────
    - name: Warm-up request
      run: |
        Invoke-WebRequest -Uri $Env:WARMUP_URL -UseBasicParsing -TimeoutSec 30
