name: Deploy Site (pull + restart IIS + ensure Postgres)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: site-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  SITE_PATH: 'C:\\inetpub\\wwwroot\\zetaslate'   # <- change only this on a new server

jobs:
  deploy:
    runs-on: [ self-hosted, windows, x64 ]
    defaults:
      run:
        shell: powershell

    steps:
    # checkout
    - uses: actions/checkout@v4

    # derive host → WARMUP_URL + DJANGO_ALLOWED_HOSTS
    - name: Load project config
      id: cfg
      run: |
        $cfgPath  = "${{ github.workspace }}\project-config.json"
        $cfg      = Test-Path $cfgPath ? (Get-Content -Raw $cfgPath | ConvertFrom-Json) : @{}
        $siteName = (Split-Path -Leaf $Env:SITE_PATH)
        $domain   = $cfg.websitedomain ? $cfg.websitedomain : '.com'
        $host     = "$siteName$domain"
        "WARMUP_URL=https://$host/"            | Out-File $Env:GITHUB_ENV -Append
        "DJANGO_ALLOWED_HOSTS=$host,www.$host" | Out-File $Env:GITHUB_ENV -Append
        "SITE_NAME=$siteName"                  | Out-File $Env:GITHUB_ENV -Append

    # make working tree pullable
    - name: Configure Git
      run: |
        git config --global --add safe.directory $Env:SITE_PATH
        $url = "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
        git -C $Env:SITE_PATH remote set-url origin $url

    - name: Set global Git identity
      run: |
        git config --global user.name  "${{ github.actor }} (GitHub Actions)"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Pull site code
      run: |
        git -C $Env:SITE_PATH fetch --all --prune
        git -C $Env:SITE_PATH reset --hard origin/main

    # Python
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: pip
        cache-dependency-path: 'requirements.txt'

    - name: Install requirements
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r "${{ github.workspace }}\requirements.txt"

    # IIS restart
    - name: Restart IIS
      run: |
        iisreset /stop
        iisreset /start

    # Ensure Postgres cluster running
    - name: Ensure & (re)start PostgreSQL
      run: |
        $svc = Get-WmiObject Win32_Service | ? { $_.Name -like 'postgresql*' } |
               Sort-Object Name -Descending | Select-Object -First 1
        if (-not $svc) { throw 'PostgreSQL service not found' }
        if ($svc.PathName -notmatch '\"([^\"]+\\pg_ctl\\.exe)\".*?-D\\s+\"([^\"]+)\"') {
          throw 'Cannot parse service command'
        }
        $pgCtl = $Matches[1]; $data = $Matches[2]
        if (-not (Test-Path $data)) {
          & $pgCtl initdb -D $data
          & $pgCtl register -N $svc.Name -D $data -U 'NT AUTHORITY\NetworkService'
          Set-Service $svc.Name -StartupType Automatic
          Start-Service $svc.Name
        } else {
          Restart-Service $svc.Name -Force
        }

# ➊—create role & DB once (revised)
    - name: Ensure DB & role exist
      run: |
        # PowerShell sees the machine-level POSTGRES_PASSWORD already
        $Env:PGPASSWORD = $Env:POSTGRES_PASSWORD   # <- one line solves it

        $site = $Env:SITE_NAME
        $db   = $Env:POSTGRES_DB   ? $Env:POSTGRES_DB   : $site
        $user = $Env:POSTGRES_USER ? $Env:POSTGRES_USER : $site
        $sup  = $Env:POSTGRES_SUPERUSER
        $psql = (Get-Command psql.exe).Source

        echo "::add-mask::$Env:PGPASSWORD"

        $roleExists = & $psql -U $sup -tAc "SELECT 1 FROM pg_roles WHERE rolname='$user'"
        if (-not $roleExists) { & $psql -U $sup -c "CREATE USER $user WITH PASSWORD '$Env:POSTGRES_PASSWORD';" }

        $dbExists = & $psql -U $sup -tAc "SELECT 1 FROM pg_database WHERE datname='$db'"
        if (-not $dbExists)  { & $psql -U $sup -c "CREATE DATABASE $db OWNER $user;" }