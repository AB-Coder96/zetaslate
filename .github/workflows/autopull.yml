name: Deploy ZetaSlate (pull + restart IIS + ensure Postgres)

on:
  push:
    branches: [ main ]
  # lets you run the very first initialisation manually if you want
  workflow_dispatch:

concurrency:
  group: zetaslate-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  SITE_PATH: 'C:\\inetpub\\wwwroot\\zetaslate'   # folder IIS serves
  WARMUP_URL: 'https://zetaslate.com/'

jobs:
  deploy:
    runs-on: [ self-hosted, windows, x64 ]

    defaults:
      run:
        shell: powershell

    steps:
    # ────────────────────────────────────────────────────────────────────────────
    # 0 ── check out the repo so later steps can see it
    - uses: actions/checkout@v4

    # 1 ── make the IIS-served working tree pull-able without prompts
    - name: Configure Git for non-interactive fetch
      run: |
        git config --global --add safe.directory $Env:SITE_PATH
        $token = '${{ secrets.GITHUB_TOKEN }}'
        $url   = "https://x-access-token:$token@github.com/AB-Coder96/zetaslate.git"
        git -C $Env:SITE_PATH remote set-url origin $url

    # 1½ ── set a global Git identity (used by any commit/tag created later)
    - name: Set global Git identity
      run: |
        git config --global user.name  "AB-Coder96 (GitHub Actions)"
        git config --global user.email "arazbaghezadeh@gmail.com"

    # 2 ── fast-forward the IIS-served working tree to main
    - name: Pull latest commit into SITE_PATH
      run: |
        git -C $Env:SITE_PATH fetch --all --prune
        git -C $Env:SITE_PATH reset --hard origin/main

    # 3 ── install Python + pip cache
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'

    # 4 ── install / update backend dependencies
    - name: Install backend requirements
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r "${{ github.workspace }}\\requirements.txt"

    # 5 ── restart IIS so new code + deps are loaded
    - name: Restart IIS
      run: |
        iisreset /stop
        iisreset /start

    # 5½ ── ensure PostgreSQL cluster exists, then restart or start service
    - name: Ensure & (re)start PostgreSQL (auto-detect install path)
      run: |
        # ── find the newest PostgreSQL installation in the registry
        $instRoot = 'HKLM:\SOFTWARE\PostgreSQL\Installations'
        if (-not (Test-Path $instRoot)) {
          Write-Error "No PostgreSQL installation registry root found at $instRoot"
          exit 1
        }

        $instKeys = @(Get-ChildItem $instRoot) | Sort-Object PSChildName -Descending
        if ($instKeys.Count -eq 0) {
          Write-Error "No PostgreSQL installations found under $instRoot"
          exit 1
        }

        # pick the newest (e.g. postgresql-x64-17)
        $pgKey       = $instKeys[0]
        $pgProps     = Get-ItemProperty $pgKey.PSPath
        $pgBin       = $pgProps.Bin_Dir
        $dataDir     = $pgProps.Data_Dir
        $serviceName = $pgKey.PSChildName

        Write-Host "Detected PostgreSQL:"
        Write-Host "  Service  : $serviceName"
        Write-Host "  Bin dir  : $pgBin"
        Write-Host "  Data dir : $dataDir"

        if (-not (Test-Path "$pgBin\pg_ctl.exe")) {
          Write-Error "pg_ctl.exe not found at $pgBin"
          exit 1
        }

        if (-not (Test-Path $dataDir)) {
          Write-Host "Data directory missing. Initialising…"
          & "$pgBin\pg_ctl.exe" initdb -D $dataDir
          & "$pgBin\pg_ctl.exe" register `
              -N $serviceName `
              -D $dataDir `
              -U "NT AUTHORITY\NetworkService"
          Set-Service -Name $serviceName -StartupType Automatic
          Start-Service -Name $serviceName
        } else {
          Write-Host "Data directory exists. Restarting service…"
          Restart-Service -Name $serviceName -Force
        }

    # 6 ── warm-up request so first user hit is fast
    - name: Warm-up request
      run: |
        Invoke-WebRequest -Uri $Env:WARMUP_URL -UseBasicParsing -TimeoutSec 30
