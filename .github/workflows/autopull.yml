name: Deploy Site (pull + restart IIS + ensure Postgres)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: site-deploy-${{ github.ref }}
  cancel-in-progress: true

# ── Change only this per server ───────────────────────────────────────────────
env:
  SITE_PATH: 'C:\\inetpub\\wwwroot\\zetaslate'      # IIS site folder
# ──────────────────────────────────────────────────────────────────────────────

jobs:
  deploy:
    runs-on: [ self-hosted, windows, x64 ]
    defaults:
      run:
        shell: powershell

    steps:
    # 0 ── check out repo
    - uses: actions/checkout@v4

    # 0½ ── derive host + export env-vars (compatible with PowerShell 5)
    - name: Load project config
      run: |
        $cfgPath = "${{ github.workspace }}\project-config.json"
        $cfg     = @{}
        if (Test-Path $cfgPath) {
          $cfg = Get-Content -Raw $cfgPath | ConvertFrom-Json
        }

        $siteName = Split-Path -Leaf $Env:SITE_PATH   # ⇒ zetaslate
        $domain   = '.com'
        if ($cfg -ne $null -and $cfg.PSObject.Properties['websitedomain']) {
          if ($cfg.websitedomain) { $domain = $cfg.websitedomain }
        }

        $siteHost = "$siteName$domain"                # zetaslate.com
        $warmUrl  = "https://$siteHost/"

        "WARMUP_URL=$warmUrl"                            | Out-File $Env:GITHUB_ENV -Append
        "DJANGO_ALLOWED_HOSTS=$siteHost,www.$siteHost"   | Out-File $Env:GITHUB_ENV -Append
        "SITE_NAME=$siteName"                            | Out-File $Env:GITHUB_ENV -Append

    # 1 ── make the IIS working tree pull-able
    - name: Configure Git
      run: |
        git config --global --add safe.directory $Env:SITE_PATH
        $url = "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
        git -C $Env:SITE_PATH remote set-url origin $url

    - name: Set global Git identity
      run: |
        git config --global user.name  "${{ github.actor }} (GitHub Actions)"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    # 2 ── pull latest code into IIS folder
    - name: Pull site code
      run: |
        git -C $Env:SITE_PATH fetch --all --prune
        git -C $Env:SITE_PATH reset --hard origin/main

    # 3 ── Python + requirements
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: pip
        cache-dependency-path: 'requirements.txt'

    - name: Install requirements
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r "${{ github.workspace }}\requirements.txt"

    # 4 ── restart IIS so new code is loaded
    - name: Restart IIS
      run: |
        iisreset /stop
        iisreset /start

    # 5 ── ensure PostgreSQL cluster / service (robust path parsing)
    - name: Ensure & (re)start PostgreSQL
      run: |
        $svc = Get-WmiObject Win32_Service | ? { $_.Name -like 'postgresql*' } |
               Sort-Object Name -Descending | Select-Object -First 1
        if (-not $svc) { throw 'PostgreSQL service not found' }

        Write-Host  "Service name : $($svc.Name)"
        Write-Host  "Image path   : $($svc.PathName)"

        # locate pg_ctl.exe
        if ($svc.PathName -match '"?([^\" ]*\\pg_ctl\\.exe)') {
          $pgCtl = $Matches[1]
        } else { throw 'Cannot find pg_ctl.exe in service command' }

        # locate -D data directory
        if ($svc.PathName -match '-D\\s+\"?([^\" ]+)') {
          $data = $Matches[1]
        } else { throw 'Cannot find -D <data dir> in service command' }

        Write-Host "pg_ctl.exe    : $pgCtl"
        Write-Host "Data dir      : $data"

        if (-not (Test-Path $data)) {
          Write-Host 'Data dir missing – initialising cluster …'
          & $pgCtl initdb -D $data
          & $pgCtl register -N $svc.Name -D $data -U 'NT AUTHORITY\NetworkService'
          Set-Service $svc.Name -StartupType Automatic
          Start-Service $svc.Name
        } else {
          Restart-Service $svc.Name -Force
        }

    # 5¾ ── create role & DB once (defaults to site name)
    - name: Ensure DB & role exist
      run: |
        $Env:PGPASSWORD = $Env:POSTGRES_PASSWORD
        echo "::add-mask::$Env:PGPASSWORD"

        $site = $Env:SITE_NAME
        $db   = $Env:POSTGRES_DB   ? $Env:POSTGRES_DB   : $site
        $user = $Env:POSTGRES_USER ? $Env:POSTGRES_USER : $site
        $sup  = $Env:POSTGRES_SUPERUSER
        $psql = (Get-Command psql.exe).Source

        $roleExists = & $psql -U $sup -tAc "SELECT 1 FROM pg_roles WHERE rolname='$user'" 2>$null
        if (-not $roleExists) {
          & $psql -U $sup -c "CREATE USER $user WITH PASSWORD '$Env:POSTGRES_PASSWORD';"
        }

        $dbExists = & $psql -U $sup -tAc "SELECT 1 FROM pg_database WHERE datname='$db'" 2>$null
        if (-not $dbExists) {
          & $psql -U $sup -c "CREATE DATABASE $db OWNER $user;"
        }

    # 6 ── Django migrations
    - name: Django migrate
      run: |
        cd $Env:SITE_PATH
        python manage.py migrate --noinput

    # 7 ── warm-up request so first hit is fast
    - name: Warm-up request
      run: |
        Invoke-WebRequest -Uri $Env:WARMUP_URL -UseBasicParsing -TimeoutSec 30
