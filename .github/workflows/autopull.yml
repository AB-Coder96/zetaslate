name: Deploy ZetaSlate (pull + restart IIS + ensure Postgres)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: zetaslate-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  SITE_PATH: 'C:\\inetpub\\wwwroot\\zetaslate'
  WARMUP_URL: 'https://zetaslate.com/'

jobs:
  deploy:
    runs-on: [ self-hosted, windows, x64 ]

    defaults:
      run:
        shell: powershell

    steps:
    # ────────────────────────────────────────────────────────────────────────
    # 0 ── bring the repo into the workspace
    - uses: actions/checkout@v4

    # 1 ── make the IIS-served working tree pull-able
    - name: Configure Git for non-interactive fetch
      run: |
        git config --global --add safe.directory $Env:SITE_PATH
        $token = '${{ secrets.GITHUB_TOKEN }}'
        $url   = "https://x-access-token:$token@github.com/AB-Coder96/zetaslate.git"
        git -C $Env:SITE_PATH remote set-url origin $url

    # 1½ ── set a global Git identity
    - name: Set global Git identity
      run: |
        git config --global user.name  "AB-Coder96 (GitHub Actions)"
        git config --global user.email "arazbaghezadeh@gmail.com"

    # 2 ── fast-forward the on-disk site to main
    - name: Pull latest commit into SITE_PATH
      run: |
        git -C $Env:SITE_PATH fetch --all --prune
        git -C $Env:SITE_PATH reset --hard origin/main

    # 3 ── set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'

    # 4 ── install / update backend deps
    - name: Install backend requirements
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r "${{ github.workspace }}\\requirements.txt"

    # 5 ── restart IIS so new code + deps are loaded
    - name: Restart IIS
      run: |
        iisreset /stop
        iisreset /start

    # 5½ ── ensure PostgreSQL exists, then start/restart it
    - name: Ensure & (re)start PostgreSQL (discover via Windows service)
      run: |
        # ── pick the newest PostgreSQL Windows service (e.g. postgresql-x64-17)
        $pgSvc = Get-WmiObject -Class Win32_Service |
                 Where-Object { $_.Name -like 'postgresql*' } |
                 Sort-Object Name -Descending |
                 Select-Object -First 1

        if (-not $pgSvc) {
          Write-Error "No Windows service named 'postgresql-x64-*' found. Is PostgreSQL installed?"
          exit 1
        }

        $serviceName = $pgSvc.Name
        $pathName    = $pgSvc.PathName

        Write-Host  "Using service : $serviceName"
        Write-Host  "Image path    : $pathName"

        # ── pull pg_ctl.exe and data dir out of the ImagePath
        if ($pathName -notmatch '"([^"]+\\pg_ctl\.exe)"\s+runservice.*? -D\s+"([^"]+)"') {
          Write-Error "Could not parse pg_ctl.exe or data directory from '$pathName'"
          exit 1
        }

        $pgCtl   = $Matches[1]
        $dataDir = $Matches[2]
        $pgBin   = Split-Path $pgCtl

        Write-Host "pg_ctl.exe     : $pgCtl"
        Write-Host "Data directory : $dataDir"

        if (-not (Test-Path $pgCtl)) {
          Write-Error "`$pgCtl not found on disk."
          exit 1
        }

        if (-not (Test-Path $dataDir)) {
          Write-Host "Data directory missing → first-time initialisation…"
          & $pgCtl initdb -D $dataDir
          & $pgCtl register `
              -N $serviceName `
              -D $dataDir `
              -U "NT AUTHORITY\NetworkService"
          Set-Service -Name $serviceName -StartupType Automatic
          Start-Service -Name $serviceName
        } else {
          Write-Host "Data directory exists → restarting service…"
          Restart-Service -Name $serviceName -Force
        }

    # 6 ── warm-up request so first user hit is fast
    - name: Warm-up request
      run: |
        Invoke-WebRequest -Uri $Env:WARMUP_URL -UseBasicParsing -TimeoutSec 30
